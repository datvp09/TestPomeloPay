// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Home Rendering should match to snapshot 1`] = `
<View
  style={
    Object {
      "backgroundColor": "#d0d0d0",
      "flex": 1,
    }
  }
>
  <View>
    <View
      style={
        Object {
          "backgroundColor": "#1365AF",
          "height": 20,
        }
      }
    />
    <View
      style={
        Array [
          Object {
            "alignItems": "center",
            "backgroundColor": "#1365AF",
            "flexDirection": "row",
            "height": 55,
            "justifyContent": "space-between",
            "paddingLeft": 25,
          },
          Object {
            "height": 60,
          },
        ]
      }
    >
      <Text
        style={
          Array [
            Object {
              "color": "white",
              "fontSize": 17,
            },
            undefined,
          ]
        }
      >
        All Transactions
      </Text>
      <View
        accessible={true}
        focusable={true}
        isTVSelectable={true}
        onClick={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "alignItems": "center",
            "height": 30,
            "marginRight": 15,
            "opacity": 1,
            "paddingTop": 3,
            "width": 40,
          }
        }
      >
        <Image
          resizeMode="contain"
          source={
            Object {
              "testUri": "../../../src/assets/images/iconBack.png",
            }
          }
          style={
            Object {
              "height": 20,
              "tintColor": "white",
              "width": 20,
            }
          }
        />
      </View>
    </View>
  </View>
  <RCTScrollView
    data={Array []}
    disableVirtualization={false}
    getItem={[Function]}
    getItemCount={[Function]}
    horizontal={false}
    initialNumToRender={10}
    keyExtractor={[Function]}
    maxToRenderPerBatch={10}
    numColumns={1}
    onContentSizeChange={[Function]}
    onEndReachedThreshold={2}
    onLayout={[Function]}
    onMomentumScrollEnd={[Function]}
    onRefresh={[Function]}
    onScroll={[Function]}
    onScrollBeginDrag={[Function]}
    onScrollEndDrag={[Function]}
    refreshControl={
      <RefreshControlMock
        onRefresh={[Function]}
        refreshing={false}
      />
    }
    refreshing={false}
    removeClippedSubviews={false}
    renderItem={[Function]}
    scrollEventThrottle={50}
    stickyHeaderIndices={Array []}
    style={
      Object {
        "flex": 1,
        "marginBottom": 10,
      }
    }
    updateCellsBatchingPeriod={50}
    viewabilityConfigCallbackPairs={Array []}
    windowSize={21}
  >
    <RCTRefreshControl />
    <View />
  </RCTScrollView>
  <Modal
    animationType="none"
    hardwareAccelerated={false}
    hideModalContentWhileAnimating={false}
    onModalHide={[Function]}
    onModalWillHide={[Function]}
    onModalWillShow={[Function]}
    onRequestClose={[Function]}
    scrollHorizontal={false}
    scrollOffset={0}
    scrollOffsetMax={0}
    scrollTo={null}
    supportedOrientations={
      Array [
        "portrait",
        "landscape",
      ]
    }
    swipeThreshold={100}
    transparent={true}
    visible={false}
  >
    <View
      accessible={true}
      focusable={true}
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "backgroundColor": "black",
          "bottom": 0,
          "height": 1334,
          "left": 0,
          "opacity": 0,
          "position": "absolute",
          "right": 0,
          "top": 0,
          "width": 750,
        }
      }
    />
    <View
      hideModalContentWhileAnimating={false}
      onModalHide={[Function]}
      onModalWillHide={[Function]}
      onModalWillShow={[Function]}
      pointerEvents="box-none"
      scrollHorizontal={false}
      scrollOffset={0}
      scrollOffsetMax={0}
      scrollTo={null}
      style={
        Object {
          "flex": 1,
          "justifyContent": "center",
          "margin": 37.5,
          "transform": Array [
            Object {
              "translateY": 0,
            },
          ],
        }
      }
      supportedOrientations={
        Array [
          "portrait",
          "landscape",
        ]
      }
      swipeThreshold={100}
    >
      <View
        style={
          Object {
            "alignSelf": "center",
            "backgroundColor": "white",
            "borderRadius": 4,
            "height": 100,
            "justifyContent": "space-between",
            "width": "80%",
          }
        }
      >
        <Text
          style={
            Object {
              "flex": 1,
              "marginTop": 15,
              "textAlign": "center",
            }
          }
        >
          Confirm refund all transactions
        </Text>
        <View
          accessible={true}
          focusable={true}
          isTVSelectable={true}
          onClick={[Function]}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            Object {
              "alignItems": "center",
              "backgroundColor": "white",
              "borderRadius": 4,
              "borderTopColor": "#aaa",
              "borderTopWidth": 1,
              "height": 35,
              "justifyContent": "center",
              "opacity": 1,
              "width": "100%",
            }
          }
        >
          <Text>
            OK
          </Text>
        </View>
      </View>
    </View>
  </Modal>
</View>
`;
